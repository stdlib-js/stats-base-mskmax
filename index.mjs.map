{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - stride length for `mask`\n* @param {NonNegativeInteger} offsetMask - starting index for `mask`\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n*\n* var v = mskmax( 5, x, 2, 1, mask, 2, 1 );\n* // returns 4.0\n*/\nfunction mskmax( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar ox;\n\tvar om;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tox = arraylike2object( x );\n\tom = arraylike2object( mask );\n\tif ( ox.accessorProtocol || om.accessorProtocol ) {\n\t\treturn accessors( N, ox, strideX, offsetX, om, strideMask, offsetMask );\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = x[ ix ];\n\tif ( isnan( max ) ) {\n\t\treturn max;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default mskmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array according to a mask.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} mask - mask array object\n* @param {Collection} mask.data - mask array data\n* @param {Array<Function>} mask.accessors - mask element accessors\n* @param {integer} strideMask - stride length for `mask`\n* @param {NonNegativeInteger} offsetMask - starting index for `mask`\n* @returns {Object} output maximum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n*\n* var v = mskmax( 5, arraylike2object( toAccessorArray( x ) ), 2, 1, arraylike2object( toAccessorArray( mask ) ), 2, 1 );\n* // returns 4.0\n*/\nfunction mskmax( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar xbuf;\n\tvar mbuf;\n\tvar xget;\n\tvar mget;\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tmbuf = mask.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\tmget = mask.accessors[ 0 ];\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mget( mbuf, im ) === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = xget( xbuf, ix );\n\tif ( isnan( max ) ) {\n\t\treturn max;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mget( mbuf, im ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default mskmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, -2.0, 4.0, 2.0 ];\n* var mask = [ 0, 0, 1, 0 ];\n*\n* var v = mskmax( x.length, x, 1, mask, 1 );\n* // returns 2.0\n*/\nfunction mskmax( N, x, strideX, mask, strideMask ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), mask, strideMask, stride2offset( N, strideMask ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default mskmax;\n"],"names":["mskmax","N","x","strideX","offsetX","mask","strideMask","offsetMask","max","ix","im","ox","om","v","i","NaN","arraylike2object","accessorProtocol","xbuf","mbuf","xget","mget","data","accessors","isnan","isPositiveZero","ndarray","stride2offset"],"mappings":";;yZAiDA,SAASA,EAAQC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,GAC1D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,OAAOc,IAIR,GAFAJ,EAAKK,EAAkBd,GACvBU,EAAKI,EAAkBX,GAClBM,EAAGM,kBAAoBL,EAAGK,iBAC9B,OCTF,SAAiBhB,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,GAC1D,IAAIW,EACAC,EACAC,EACAC,EACAb,EACAC,EACAC,EACAG,EACAC,EAUJ,GAPAI,EAAOhB,EAAEoB,KACTH,EAAOd,EAAKiB,KAGZF,EAAOlB,EAAEqB,UAAW,GACpBF,EAAOhB,EAAKkB,UAAW,GAElBtB,GAAK,EACT,OAAOc,IAIR,IAFAN,EAAKL,EACLM,EAAKH,EACCO,EAAI,EAAGA,EAAIb,GACU,IAArBoB,EAAMF,EAAMT,GADEI,IAInBL,GAAMN,EACNO,GAAMJ,EAEP,GAAKQ,IAAMb,EACV,OAAOc,IAGR,GADAP,EAAMY,EAAMF,EAAMT,GACbe,EAAOhB,GACX,OAAOA,EAGR,IADAM,GAAK,EACIA,EAAIb,EAAGa,IAGf,GAFAL,GAAMN,GAEDkB,EAAMF,EADXT,GAAMJ,GACN,CAIA,GADAO,EAAIO,EAAMF,EAAMT,GACXe,EAAOX,GACX,OAAOA,GAEHA,EAAIL,GAASK,IAAML,GAAOiB,EAAgBZ,MAC9CL,EAAMK,EANN,CASF,OAAOL,CACR,CD7CSe,CAAWtB,EAAGU,EAAIR,EAASC,EAASQ,EAAIN,EAAYC,GAI5D,IAFAE,EAAKL,EACLM,EAAKH,EACCO,EAAI,EAAGA,EAAIb,GACI,IAAfI,EAAMK,GADQI,IAInBL,GAAMN,EACNO,GAAMJ,EAEP,GAAKQ,IAAMb,EACV,OAAOc,IAGR,GADAP,EAAMN,EAAGO,GACJe,EAAOhB,GACX,OAAOA,EAGR,IADAM,GAAK,EACIA,EAAIb,EAAGa,IAGf,GAFAL,GAAMN,GAEDE,EADLK,GAAMJ,GACN,CAIA,GADAO,EAAIX,EAAGO,GACFe,EAAOX,GACX,OAAOA,GAEHA,EAAIL,GAASK,IAAML,GAAOiB,EAAgBZ,MAC9CL,EAAMK,EANN,CASF,OAAOL,CACR,CErDA,SAASR,EAAQC,EAAGC,EAAGC,EAASE,EAAMC,GACrC,OAAOoB,EAASzB,EAAGC,EAAGC,EAASwB,EAAe1B,EAAGE,GAAWE,EAAMC,EAAYqB,EAAe1B,EAAGK,GACjG"}